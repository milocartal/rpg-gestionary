// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.LongText annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.LongText
    access_token             String? // @db.LongText
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.LongText
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Species {
    id          String @id @default(cuid())
    name        String
    description String @db.LongText

    averageAge Int

    maxWeight Float // kg
    minWeight Float // kg

    maxHeight Float // cm
    minHeight Float // cm

    Animals Animal[]
}

model Population {
    id          String @id @default(cuid())
    name        String
    description String @db.LongText

    averageAge    Int
    averageWeight Float // kg
    averageHeight Float // cm

    bonus String @db.LongText //metadata of the bonus for certain skills

    Characters Character[]
}

model Animal {
    id   String @id @default(cuid())
    name String

    age    Int // year
    weight Float // kg
    height Float // cm

    sexe Sexe

    detail      String @db.LongText
    phisics     String @db.LongText
    personality String @db.LongText

    //Skills
    Skills Skill[] @relation("AnimalSkills")

    hp Float

    Species   Species @relation(fields: [speciesId], references: [id])
    speciesId String

    characterId String
    Character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model Character {
    id String @id @default(cuid())

    name      String
    firstName String

    age    Int // year
    weight Float // kg
    height Float // cm

    sexe Sexe

    history     String @db.LongText
    detail      String @db.LongText
    phisics     String @db.LongText
    personality String @db.LongText

    //Skills
    Skills Skill[] @relation("CharacterSkills")

    populationId String
    Population   Population @relation(fields: [populationId], references: [id])

    Animals Animal[]
}

enum Sexe {
    MALE
    FEMEALE
}

model BaseSkill {
    id          String    @id @default(cuid())
    name        String
    description String    @db.LongText
    type        TypeSkill

    Skills Skill[]
}

enum TypeSkill {
    PHISIC
    SOCIAL
    MENTAL
}

model Skill {
    id    String @id @default(cuid())
    name  String
    value Int

    baseSkillId String
    BaseSkill   BaseSkill @relation(fields: [baseSkillId], references: [id])

    characterId String?
    Character   Character? @relation("CharacterSkills", fields: [characterId], references: [id], onDelete: Cascade)
    animalId    String?
    Animal      Animal?    @relation("AnimalSkills", fields: [animalId], references: [id], onDelete: Cascade)
}
