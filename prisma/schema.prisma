// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the //@db.LongText annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? //@db.LongText
    access_token             String? // //@db.LongText
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // //@db.LongText
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    universeId String?
    Universe   UserToUniverse? @relation(fields: [universeId], references: [id])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    role          String    @default("default")
    accepted_cgu  Boolean   @default(false)
    accounts      Account[]
    sessions      Session[]

    // Relations
    Pets             Pet[]
    Characters       Character[]
    Stories          Story[]
    Universes        UserToUniverse[]
    UniversesCreated Universe[]       @relation("CreateBy")
    PasswordTokens   PasswordToken[]

    ReviewedPets       Pet[]       @relation("ReviewerPet")
    ReviewedCharacters Character[] @relation("ReviewerCharacter")

    AuditLogs AuditLog[] @relation("Author")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PasswordToken {
    id        String       @id @default(cuid())
    tokenHash String       @unique
    purpose   TokenPurpose
    expires   DateTime
    createdAt DateTime     @default(now())
    usedAt    DateTime?
    userId    String
    User      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([expires])
    @@index([purpose])
}

enum TokenPurpose {
    RESET
    INVITE
}

model VerifyEmailToken {
    id        String    @id @default(cuid())
    email     String
    tokenHash String    @unique
    expires   DateTime
    createdAt DateTime  @default(now())
    usedAt    DateTime?

    @@index([email])
    @@index([expires])
}

model Universe {
    id          String @id @default(cuid())
    name        String
    slug        String @unique
    description String //@db.LongText

    banner String? // URL de l'image de la bannière

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdById String
    CreatedBy   User   @relation("CreateBy", fields: [createdById], references: [id], onDelete: Cascade)

    public Boolean @default(false) // Indique si l'univers est public (accessible à tous les joueurs) ou privé. Le MJ / Gestionnaire pourra cependant inviter des joueurs.

    // Relations
    BaseAttributes BaseAttribute[]
    BaseSkills     BaseSkill[]
    Classes        Class[]
    Genders        Gender[]
    Items          Item[]
    Populations    Population[]
    Species        Species[]
    Stories        Story[]
    Users          UserToUniverse[]

    @@index([slug])
    @@index([createdById])
}

model UserToUniverse {
    id         String @id @default(cuid())
    userId     String
    universeId String
    role       String

    User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    Universe Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)

    Session Session[]

    @@unique([userId, universeId])
    @@index([userId, universeId])
}

model Species {
    id          String @id @default(cuid())
    name        String
    slug        String @unique
    description String //@db.LongText

    image String? // URL de l'image

    averageAge Int

    maxWeight Float // kg
    minWeight Float // kg

    maxHeight Float // cm
    minHeight Float // cm

    Pets Pet[]

    Universe   Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)
    universeId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([universeId, slug])
    @@index([universeId])
    @@index([slug])
}

model Population {
    id          String @id @default(cuid())
    name        String
    slug        String @unique
    description String //@db.LongText

    image String? // URL de l'image

    averageAge    Int
    averageWeight Float // kg
    averageHeight Float // cm

    Modifiers PopulationModifier[]

    Characters Character[]

    Universe   Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)
    universeId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([universeId, slug])
    @@index([universeId])
    @@index([slug])
}

model Story {
    id          String @id @default(cuid())
    name        String
    slug        String @unique
    description String //@db.LongText

    banner String? // URL de l'image de la bannière

    // Relations
    universeId String
    Universe   Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdById String
    CreatedBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

    Pets       Pet[]
    Characters Character[]

    SessionsUnity SessionUnity[]

    @@unique([universeId, slug])
    @@index([universeId])
    @@index([slug])
}

enum LifeStage {
    EGG
    BABY
    CHILD
    TEEN
    ADULT
    ELDER
}

enum LifeStatus {
    ALIVE
    DEAD
    UNCONSCIOUS
    SLEEPING
    POISONED
    STUNNED
    PARALYZED
    BURNED
    FROZEN
}

model Pet {
    id   String @id @default(cuid())
    name String
    slug String @unique

    image String? // URL de l'image

    age    Int // year
    weight Float // kg
    height Float // cm

    hp Float

    genderId String
    Gender   Gender @relation(fields: [genderId], references: [id])

    detail      String //@db.LongText
    appearance  String //@db.LongText
    personality String //@db.LongText

    lifeStage  LifeStage  @default(CHILD)
    lifeStatus LifeStatus @default(ALIVE)

    //Skills
    Attributes Attribute[] @relation("PetAttribute")
    Skills     Skill[]     @relation("PetSkills")
    Modifiers  Modifier[]

    Species   Species @relation(fields: [speciesId], references: [id])
    speciesId String

    characterId String
    Character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

    storyId String
    Story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

    userId String
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    Items ItemInstance[]

    isValid        Boolean   @default(false) // Indique si l'animal a été validé par le MJ
    lastReviewedAt DateTime?
    reviewById     String?
    ReviewedBy     User?     @relation("ReviewerPet", fields: [reviewById], references: [id])
    notes          String? //@db.LongText

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([storyId, slug])
    @@index([userId])
    @@index([storyId])
    @@index([speciesId])
    @@index([characterId])
    @@index([slug])
}

model Character {
    id String @id @default(cuid())

    name      String
    firstName String
    slug      String @unique

    image String? // URL de l'image

    age    Int // year
    weight Float // kg
    height Float // cm

    lifeStage  LifeStage  @default(ADULT)
    lifeStatus LifeStatus @default(ALIVE)

    hp Float

    genderId String
    Gender   Gender @relation(fields: [genderId], references: [id])

    history     String //@db.LongText
    detail      String //@db.LongText
    appearance  String //@db.LongText
    personality String //@db.LongText

    //Skills
    Attributes Attribute[] @relation("CharacterAttribute")
    Skills     Skill[]     @relation("CharacterSkills")
    Modifiers  Modifier[]

    Classes CharacterClass[]
    Pets    Pet[]

    Items ItemInstance[]

    populationId String
    Population   Population @relation(fields: [populationId], references: [id])

    userId String
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    storyId String
    Story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

    isValid      Boolean   @default(false) // Indique si le personnage a été validé par le MJ
    reviewedAt   DateTime?
    reviewedById String?
    ReviewedBy   User?     @relation("ReviewerCharacter", fields: [reviewedById], references: [id])
    notes        String? //@db.LongText

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([storyId, slug])
    @@index([userId])
    @@index([storyId])
    @@index([populationId])
    @@index([genderId])
    @@index([slug])
}

model Gender {
    id   String @id @default(cuid())
    name String
    slug String @unique

    Characters Character[]
    Pets       Pet[]

    universeId String
    Universe   Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([universeId, slug])
    @@index([universeId])
    @@index([slug])
}

model Class {
    id          String @id @default(cuid())
    name        String
    slug        String @unique
    description String //@db.LongText

    Characters CharacterClass[]

    universeId String
    Universe   Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([universeId, slug])
    @@index([universeId])
    @@index([slug])
}

model CharacterClass {
    id          String    @id @default(cuid())
    characterId String
    Character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
    classId     String
    Class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)

    level Int

    @@unique([characterId, classId])
}

model BaseAttribute {
    id          String   @id @default(cuid())
    name        String
    slug        String   @unique
    description String //@db.LongText
    universeId  String
    Universe    Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)

    Attributes          Attribute[]
    BaseSkills          BaseSkill[]
    PopulationModifiers PopulationModifier[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([universeId, slug])
    @@index([universeId])
    @@index([slug])
}

model Attribute {
    id              String        @id @default(cuid())
    baseAttributeId String
    BaseAttribute   BaseAttribute @relation(fields: [baseAttributeId], references: [id])
    value           Int

    characterId String?
    Character   Character? @relation("CharacterAttribute", fields: [characterId], references: [id], onDelete: Cascade)

    petId String?
    Pet   Pet?    @relation("PetAttribute", fields: [petId], references: [id], onDelete: Cascade)

    Modifiers Modifier[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([characterId, baseAttributeId])
    @@unique([petId, baseAttributeId])
}

model BaseSkill {
    id            String        @id @default(cuid())
    name          String
    slug          String        @unique
    description   String //@db.LongText
    attributeId   String // clé étrangère vers BaseAttribute
    BaseAttribute BaseAttribute @relation(fields: [attributeId], references: [id])
    universeId    String
    Universe      Universe      @relation(fields: [universeId], references: [id], onDelete: Cascade)

    Skills              Skill[]
    PopulationModifiers PopulationModifier[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([universeId, slug])
    @@index([universeId])
    @@index([attributeId])
    @@index([slug])
}

model Skill {
    id          String    @id @default(cuid())
    baseSkillId String
    BaseSkill   BaseSkill @relation(fields: [baseSkillId], references: [id])
    value       Int

    characterId String?
    Character   Character? @relation("CharacterSkills", fields: [characterId], references: [id], onDelete: Cascade)

    petId String?
    Pet   Pet?    @relation("PetSkills", fields: [petId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Polymorphic relations
    Modifiers Modifier[]

    @@unique([characterId, baseSkillId])
    @@unique([petId, baseSkillId])
}

model Modifier {
    id          String  @id @default(cuid())
    name        String // Nom du modificateur (ex: Anneau de Force, Bénédiction)
    description String? //@db.LongText

    type ModifierType // ENUM: ATTRIBUTE, SKILL

    value    Int // Valeur du bonus/malus (ex: 2 ou -1)
    isActive Boolean @default(true)

    // Liens polymorphes
    attributeId String?
    Attribute   Attribute? @relation(fields: [attributeId], references: [id], onDelete: Cascade)

    skillId String?
    Skill   Skill?  @relation(fields: [skillId], references: [id], onDelete: Cascade)

    characterId String?
    Character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)

    petId String?
    Pet   Pet?    @relation(fields: [petId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PopulationModifier {
    id           String     @id @default(cuid())
    populationId String
    Population   Population @relation(fields: [populationId], references: [id], onDelete: Cascade)

    type  ModifierType // ATTRIBUTE ou SKILL
    value Int

    baseAttributeId String?
    BaseAttribute   BaseAttribute? @relation(fields: [baseAttributeId], references: [id])

    baseSkillId String?
    BaseSkill   BaseSkill? @relation(fields: [baseSkillId], references: [id])

    description String? //@db.LongText

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ModifierType {
    ATTRIBUTE
    SKILL
}

model Item {
    id           String   @id @default(cuid())
    name         String
    slug         String   @unique
    description  String? //@db.LongText
    sprite       String? // URL de l'image ou du sprite associé à l'item
    type         ItemType
    weight       Float?
    value        Int? // valeur monétaire
    isConsumable Boolean  @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    public Boolean @default(false) // Indique si l'item est public (accessible à tous les joueurs) ou privé (seulement pour le MJ). Le MJ pourra cependant créer une instance privée pour un joueur durant une partie.s

    Universe   Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)
    universeId String

    ItemInstances ItemInstance[]

    @@unique([universeId, slug])
    @@index([universeId])
}

model ItemInstance {
    id         String @id @default(cuid())
    baseItemId String
    BaseItem   Item   @relation(fields: [baseItemId], references: [id], onDelete: Cascade)

    characterId String?
    Character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)

    petId String?
    Pet   Pet?    @relation(fields: [petId], references: [id], onDelete: Cascade)

    quantity Int     @default(1)
    equipped Boolean @default(false)

    notes String? //@db.LongText

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ItemType {
    WEAPON
    ARMOR
    CONSUMABLE
    TOOL
    MISC
    FOOD
    POTION
}

//Unity part

enum SessionUnityStatus {
    WAITING
    IN_PROGRESS
    FINISHED
}

model SessionUnity {
    id      String @id @default(cuid())
    storyId String
    Story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

    name        String
    description String //@db.LongText

    joinCode String             @unique // Code de session pour rejoindre la partie
    status   SessionUnityStatus @default(WAITING) // Statut de la session

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    MapInstances MapInstance[]
}

model Map {
    id          String @id @default(cuid())
    name        String
    slug        String @unique
    description String //@db.LongText

    Tiles     MapTile[]
    Instances MapInstance[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MapInstance {
    id String @id @default(cuid())

    sessionUnityId String
    SessionUnity   SessionUnity @relation(fields: [sessionUnityId], references: [id], onDelete: Cascade)

    mapId String
    Map   Map    @relation(fields: [mapId], references: [id], onDelete: Cascade)

    Tiles TileInstance[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TileDefinition {
    id          String @id @default(cuid())
    name        String
    slug        String @unique
    description String //@db.LongText

    spriteUrl  String // URL de l'image ou du sprite associé à la tuile
    spritePath String? // Chemin du sprite dans le projet (si applicable)

    // Propriétés de la tuile
    tileType   TileType // Type de tuile (ex: "water", "land", "forest", etc.)
    properties Json? // Propriétés supplémentaires de la tuile (ex: obstacles, ressources, etc.)
    edges      Json? // Edges de la tuile (pour les tuiles hexagonales, par exemple)

    // Relations
    MapTiles MapTile[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MapTile {
    id String @id @default(cuid())

    mapId String
    Map   Map    @relation(fields: [mapId], references: [id], onDelete: Cascade)

    q        Int // Position X sur la grille
    r        Int // Position Y sur la grille
    Z        Int // Position Z sur la grille (pour les tuiles 3D ou hauteur)
    rotation Float? // Rotation de la tuile (en degrés, si applicable)

    tileDefinitionId String
    TileDefinition   TileDefinition @relation(fields: [tileDefinitionId], references: [id], onDelete: Cascade)

    Instances TileInstance[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([mapId, q, r, Z])
}

model TileInstance {
    id String @id @default(cuid())

    mapInstanceId String
    MapInstance   MapInstance @relation(fields: [mapInstanceId], references: [id], onDelete: Cascade)

    tileId String
    Tile   MapTile @relation(fields: [tileId], references: [id], onDelete: Cascade)

    q        Int // Position X sur la grille
    r        Int // Position Y sur la grille
    Z        Int // Position Z sur la grille (pour les tuiles 3D ou hauteur)
    rotation Float? // Rotation de la tuile (en degrés, si applicable)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([mapInstanceId, q, r, Z])
}

enum TileType {
    WATER
    LAND
    FOREST
    MOUNTAIN
    DESERT
    GRASSLAND
    SWAMP
    CITY
    ROAD
    RIVER
}

// The AuditLog model tracks changes to various entities in the system.
// It records the action taken, the target entity, and metadata about the change.
model AuditLog {
    id String @id @default(cuid())

    action     AuditAction
    targetType AuditTargetType
    targetId   String?
    meta       Json?
    createdAt  DateTime        @default(now())

    authorId String?
    Author   User?   @relation("Author", fields: [authorId], references: [id])
}

enum AuditAction {
    CREATE
    READ
    UPDATE
    DELETE
    VALIDATE
}

// Adapt this enum to include all target types
enum AuditTargetType {
    USER
    UNIVERSE
    CHARACTER
    ANIMAL
    STORY
    ITEM
    SESSIONUNITY
    MAP
    TILEDEFINITION
    POPULATION
    SPECIES
}
