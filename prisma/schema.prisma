// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.LongText annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.LongText
    access_token             String? // @db.LongText
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.LongText
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    universeId String?
    Universe   UserToUniverse? @relation(fields: [universeId], references: [id])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    role          String    @default("default")
    accounts      Account[]
    sessions      Session[]

    // Relations
    Animals          Animal[]
    Characters       Character[]
    Stories          Story[]
    Universes        UserToUniverse[]
    UniversesCreated Universe[]       @relation("CreateBy")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Universe {
    id          String @id @default(cuid())
    name        String
    description String @db.LongText

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdById String
    CreatedBy   User   @relation("CreateBy", fields: [createdById], references: [id], onDelete: Cascade)

    // Relations
    BaseAttributes BaseAttribute[]
    BaseSkills     BaseSkill[]
    Classes        Class[]
    Genders        Gender[]
    Items          Item[]
    Populations    Population[]
    Species        Species[]
    Stories        Story[]
    Users          UserToUniverse[]
}

model UserToUniverse {
    id         String @id @default(cuid())
    userId     String
    universeId String
    role       String

    User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    Universe Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)

    Session Session[]

    @@unique([userId, universeId])
    @@index([userId, universeId])
}

model Species {
    id          String @id @default(cuid())
    name        String
    description String @db.LongText

    averageAge Int

    maxWeight Float // kg
    minWeight Float // kg

    maxHeight Float // cm
    minHeight Float // cm

    Animals Animal[]

    Universe   Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)
    universeId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Population {
    id          String @id @default(cuid())
    name        String
    description String @db.LongText

    averageAge    Int
    averageWeight Float // kg
    averageHeight Float // cm

    Modifiers PopulationModifier[]

    Characters Character[]

    Universe   Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)
    universeId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Story {
    id          String @id @default(cuid())
    name        String
    description String @db.LongText

    // Relations
    universeId String
    Universe   Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdById String
    CreatedBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

    Animals    Animal[]
    Characters Character[]

    SessionsUnity SessionUnity[]
}

model Animal {
    id   String @id @default(cuid())
    name String

    age    Int // year
    weight Float // kg
    height Float // cm

    hp Float

    genderId String
    Gender   Gender @relation(fields: [genderId], references: [id])

    detail      String @db.LongText
    appearance  String @db.LongText
    personality String @db.LongText

    //Skills
    Attributes Attribute[] @relation("AnimalAttribute")
    Skills     Skill[]     @relation("AnimalSkills")
    Modifiers  Modifier[]

    Species   Species @relation(fields: [speciesId], references: [id])
    speciesId String

    characterId String
    Character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

    storyId String
    Story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

    userId String
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    Items ItemInstance[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Character {
    id String @id @default(cuid())

    name      String
    firstName String

    age    Int // year
    weight Float // kg
    height Float // cm

    hp Float

    genderId String
    Gender   Gender @relation(fields: [genderId], references: [id])

    history     String @db.LongText
    detail      String @db.LongText
    appearance  String @db.LongText
    personality String @db.LongText

    //Skills
    Attributes Attribute[] @relation("CharacterAttribute")
    Skills     Skill[]     @relation("CharacterSkills")
    Modifiers  Modifier[]

    Classes CharacterClass[]
    Animals Animal[]

    Items ItemInstance[]

    populationId String
    Population   Population @relation(fields: [populationId], references: [id])

    userId String
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    storyId String
    Story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Gender {
    id   String @id @default(cuid())
    name String

    Characters Character[]
    Animals    Animal[]

    universeId String
    Universe   Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Class {
    id          String @id @default(cuid())
    name        String
    description String @db.LongText

    Characters CharacterClass[]

    universeId String
    Universe   Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CharacterClass {
    id          String    @id @default(cuid())
    characterId String
    Character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
    classId     String
    Class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)

    level Int

    @@unique([characterId, classId])
}

model BaseAttribute {
    id          String   @id @default(cuid())
    name        String
    description String   @db.LongText
    universeId  String
    Universe    Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)

    Attributes          Attribute[]
    BaseSkills          BaseSkill[]
    PopulationModifiers PopulationModifier[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Attribute {
    id              String        @id @default(cuid())
    baseAttributeId String
    BaseAttribute   BaseAttribute @relation(fields: [baseAttributeId], references: [id])
    value           Int

    characterId String?
    Character   Character? @relation("CharacterAttribute", fields: [characterId], references: [id], onDelete: Cascade)

    animalId String?
    Animal   Animal? @relation("AnimalAttribute", fields: [animalId], references: [id], onDelete: Cascade)

    Modifiers Modifier[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BaseSkill {
    id            String        @id @default(cuid())
    name          String
    description   String        @db.LongText
    attributeId   String // clé étrangère vers BaseAttribute
    BaseAttribute BaseAttribute @relation(fields: [attributeId], references: [id])
    universeId    String
    Universe      Universe      @relation(fields: [universeId], references: [id], onDelete: Cascade)

    Skills              Skill[]
    PopulationModifiers PopulationModifier[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Skill {
    id          String    @id @default(cuid())
    baseSkillId String
    BaseSkill   BaseSkill @relation(fields: [baseSkillId], references: [id])
    value       Int

    characterId String?
    Character   Character? @relation("CharacterSkills", fields: [characterId], references: [id], onDelete: Cascade)

    animalId String?
    Animal   Animal? @relation("AnimalSkills", fields: [animalId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Polymorphic relations
    Modifiers Modifier[]
}

model Modifier {
    id          String  @id @default(cuid())
    name        String // Nom du modificateur (ex: Anneau de Force, Bénédiction)
    description String? @db.LongText

    type ModifierType // ENUM: ATTRIBUTE, SKILL

    value    Int // Valeur du bonus/malus (ex: 2 ou -1)
    isActive Boolean @default(true)

    // Liens polymorphes
    attributeId String?
    Attribute   Attribute? @relation(fields: [attributeId], references: [id], onDelete: Cascade)

    skillId String?
    Skill   Skill?  @relation(fields: [skillId], references: [id], onDelete: Cascade)

    characterId String?
    Character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)

    animalId String?
    Animal   Animal? @relation(fields: [animalId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PopulationModifier {
    id           String     @id @default(cuid())
    populationId String
    Population   Population @relation(fields: [populationId], references: [id], onDelete: Cascade)

    type  ModifierType // ATTRIBUTE ou SKILL
    value Int

    baseAttributeId String?
    BaseAttribute   BaseAttribute? @relation(fields: [baseAttributeId], references: [id])

    baseSkillId String?
    BaseSkill   BaseSkill? @relation(fields: [baseSkillId], references: [id])

    description String? @db.LongText

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ModifierType {
    ATTRIBUTE
    SKILL
}

model Item {
    id           String   @id @default(cuid())
    name         String
    description  String?  @db.LongText
    sprite       String? // URL de l'image ou du sprite associé à l'item
    type         ItemType
    weight       Float?
    value        Int? // valeur monétaire
    isConsumable Boolean  @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    public Boolean @default(false) // Indique si l'item est public (accessible à tous les joueurs) ou privé (seulement pour le MJ). Le MJ pourra cependant créer une instance privée pour un joueur durant une partie.s

    Universe   Universe @relation(fields: [universeId], references: [id], onDelete: Cascade)
    universeId String

    ItemInstances ItemInstance[]
}

model ItemInstance {
    id         String @id @default(cuid())
    baseItemId String
    BaseItem   Item   @relation(fields: [baseItemId], references: [id], onDelete: Cascade)

    characterId String?
    Character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)

    animalId String?
    Animal   Animal? @relation(fields: [animalId], references: [id], onDelete: Cascade)

    quantity Int     @default(1)
    equipped Boolean @default(false)

    notes String? @db.LongText

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ItemType {
    WEAPON
    ARMOR
    CONSUMABLE
    TOOL
    MISC
    FOOD
    POTION
}

//Unity part

enum SessionUnityStatus {
    WAITING
    IN_PROGRESS
    FINISHED
}

model SessionUnity {
    id      String @id @default(cuid())
    storyId String
    Story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

    name        String
    description String @db.LongText

    joinCode String             @unique // Code de session pour rejoindre la partie
    status   SessionUnityStatus @default(WAITING) // Statut de la session

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    MapInstances MapInstance[]
}

model Map {
    id          String @id @default(cuid())
    name        String
    description String @db.LongText

    Tiles     MapTile[]
    Instances MapInstance[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MapInstance {
    id String @id @default(cuid())

    sessionUnityId String
    SessionUnity   SessionUnity @relation(fields: [sessionUnityId], references: [id], onDelete: Cascade)

    mapId String
    Map   Map    @relation(fields: [mapId], references: [id], onDelete: Cascade)

    Tiles TileInstance[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TileDefinition {
    id          String @id @default(cuid())
    name        String
    description String @db.LongText

    spriteUrl  String // URL de l'image ou du sprite associé à la tuile
    spritePath String? // Chemin du sprite dans le projet (si applicable)

    // Propriétés de la tuile
    tileType   TileType // Type de tuile (ex: "water", "land", "forest", etc.)
    properties Json? // Propriétés supplémentaires de la tuile (ex: obstacles, ressources, etc.)
    edges      Json? // Edges de la tuile (pour les tuiles hexagonales, par exemple)

    // Relations
    MapTiles MapTile[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MapTile {
    id String @id @default(cuid())

    mapId String
    Map   Map    @relation(fields: [mapId], references: [id], onDelete: Cascade)

    q        Int // Position X sur la grille
    r        Int // Position Y sur la grille
    Z        Int // Position Z sur la grille (pour les tuiles 3D ou hauteur)
    rotation Float? // Rotation de la tuile (en degrés, si applicable)

    tileDefinitionId String
    TileDefinition   TileDefinition @relation(fields: [tileDefinitionId], references: [id], onDelete: Cascade)

    Instances TileInstance[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TileInstance {
    id String @id @default(cuid())

    mapInstanceId String
    MapInstance   MapInstance @relation(fields: [mapInstanceId], references: [id], onDelete: Cascade)

    tileId String
    Tile   MapTile @relation(fields: [tileId], references: [id], onDelete: Cascade)

    q        Int // Position X sur la grille
    r        Int // Position Y sur la grille
    Z        Int // Position Z sur la grille (pour les tuiles 3D ou hauteur)
    rotation Float? // Rotation de la tuile (en degrés, si applicable)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum TileType {
    WATER
    LAND
    FOREST
    MOUNTAIN
    DESERT
    GRASSLAND
    SWAMP
    CITY
    ROAD
    RIVER
}
